---
import ArticleLayout from "@layouts/ArticleLayout.astro";
import ArticleText from "@components/ArticleText.astro";
import ArticleDivider from "@components/ArticleDivider.astro";
import ArticleImage from "@components/ArticleImage.astro";
import ImageGrid from "@components/ImageGrid.astro";

const title = "C# 8086 Compiler";
const heroImage = "https://ik.imagekit.io/ur4olhqhr/Proyects/Interpreter/1.png?updatedAt=1761643523015";
---

<ArticleLayout title={title} heroImage={heroImage}>

  <!-- Introducción -->
  <ArticleText>
    <p>
      The <strong>C# 8086 Compiler</strong> is a custom-built compiler designed to process a simple programming language through all major compilation stages — from lexical analysis to code generation. 
      It serves as both a functional compiler and an educational project to explore compiler theory and system-level programming.
    </p>
    <p>
      Built entirely in <strong>C#</strong>, it features real-time syntax feedback and a complete backend that translates validated code into functional <strong>x86 assembly</strong>, 
      demonstrating a full compilation pipeline in action.
    </p>
  </ArticleText>

  <ArticleDivider />

  <!-- Project Overview -->
  <ArticleText>
    <h2 class="text-2xl font-semibold mb-4">Project Overview</h2>
    <p>
      The compiler’s workflow is orchestrated through the main interface (<code>Compilador.cs</code>), 
      which performs lexical and syntactic analysis in real time as the user types. 
      Full compilation — including semantic analysis and assembly code generation — is triggered manually from the menu.
    </p>
    <p>
      The process includes lexical, syntactic, and semantic analysis, followed by intermediate code generation and final translation to assembly. 
      The <code>Asm.cs</code> module produces structured <strong>x86</strong> assembly with distinct <code>.Data</code> and <code>.Code</code> sections, 
      including variable declarations, arithmetic operations, control structures, and MS-DOS interrupts for input/output.
    </p>
  </ArticleText>

  <ImageGrid images={[
    { src: "https://ik.imagekit.io/ur4olhqhr/Proyects/Interpreter/4.png?updatedAt=1761644336275", alt: "High level Code" },
    { src: "https://ik.imagekit.io/ur4olhqhr/Proyects/Interpreter/2.png?updatedAt=1761644402099", alt: "8086 Assembly" }
  ]} />

  <ArticleDivider />

  <ArticleText>
    <h2 class="text-2xl font-semibold mb-4">Technical Stack</h2>
    <ul class="list-disc pl-6 space-y-1">
      <li>
        <strong>C#:</strong> The primary programming language for the compiler, with a focus on syntax validation and code generation. 
        It features real-time syntax feedback and a complete backend that translates validated code into functional <strong>x86 assembly</strong>.
      </li>
      <li>
        <strong>Assembly x86:</strong> Assembly code for the Intel 8086 microprocessor. The compiler generates this code, which
        includes arithmetic operations, I/O, and control flow translated to <strong>mov</strong>, <strong>add</strong>, <strong>cmp</strong>, and conditional jump instructions.
      </li>
      <li>
        <strong>Visual Studio:</strong> Integrated development environment (IDE) for development and debugging of the compiler.
      </li>
      <li>
        <strong>Emu8086:</strong> An emulator for the Intel 8086 microprocessor, used for visualizing the assembly code generated by the compiler.
      </li>
    </ul>
  </ArticleText>

  <ArticleDivider />

  <!-- Key Features -->
  <ArticleText>
    <h2 class="text-2xl font-semibold mb-4">Key Features</h2>
    <ul class="list-disc pl-5 space-y-2">
      <li>
        <strong>Lexical Analyzer (<code>clsLexico.cs</code>):</strong> Implements a deterministic finite automaton (DFA) using a transition table 
        to tokenize the source code and identify reserved words, variables, operators, and strings.
      </li>
      <li>
        <strong>Syntactic Analyzer (<code>clsSintactico.cs</code>):</strong> A predictive parser using a parsing table and stack-based logic to 
        validate the structure and nesting of language constructs.
      </li>
      <li>
        <strong>Semantic Analyzer (<code>Semantico.cs</code>):</strong> Builds and verifies a symbol table, checks declarations, detects type 
        mismatches, and validates operations to prevent logic errors.
      </li>
      <li>
        <strong>Intermediate Code Generation (<code>Postfijo.cs</code>):</strong> Converts infix expressions to postfix (RPN) format 
        using the <strong>Shunting-yard</strong> algorithm for easier processing.
      </li>
      <li>
        <strong>Assembly Code Translation (<code>Asm.cs</code>):</strong> Generates final <strong>x86 assembly</strong> with arithmetic, I/O, 
        and control flow translated to <code>mov</code>, <code>add</code>, <code>cmp</code>, and conditional jump instructions.
      </li>
    </ul>
  </ArticleText>

  <ArticleDivider />
  
  <!-- Key Learnings -->
  <ArticleText>
    <h2 class="text-2xl font-semibold mb-4">Key Learnings</h2>
    <ul class="list-disc pl-5 space-y-2">
      <li>Deep understanding of compiler architecture and the interaction between lexical, syntactic, and semantic analysis stages.</li>
      <li>Implementation of finite automata and predictive parsing techniques for language validation.</li>
      <li>Experience translating high-level constructs into low-level assembly code and managing memory sections manually.</li>
      <li>Exploration of asynchronous updates and real-time syntax validation within a C# GUI environment.</li>
      <li>Insight into how code structure, data types, and control flow are represented at the hardware level.</li>
    </ul>
  </ArticleText>
  
  <ArticleDivider />
  
  <ArticleText>
    <h2 class="text-2xl font-semibold mb-4">Repository</h2>
    <ul class="list-disc pl-5">
      <li>
        <a
        href="https://github.com/ChrisTheAbysswalker/amogus-script"
        class="text-indigo-600 hover:underline"
        target="_blank"
        >Interpreter Repository</a>
      </li>
    </ul>
  </ArticleText>
  
  <ArticleDivider />

  <ArticleText>
    <p class="italic text-gray-600">
      This project serves as an example of a compiler that translates high-level language constructs into low-level assembly code,
      highlighting the importance of understanding the compiler architecture and the interaction between lexical, syntactic, and semantic analysis stages.
    </p>
  </ArticleText>

</ArticleLayout>
